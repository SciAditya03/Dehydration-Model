# -*- coding: utf-8 -*-
"""Dehydration_prediction_model

Automatically generated by Colab.

Original file is located at
    https://colab.research.google.com/drive/1dHUsrjCY7xXNvb7bs5c-WU_YyqHu9Pc2
"""

import numpy as np
import pandas as pd
from sklearn.model_selection import train_test_split
from sklearn.preprocessing import StandardScaler
from tensorflow.keras.models import Sequential
from tensorflow.keras.layers import Dense, Dropout

# Load the training dataset
training_data_file_path = "dehydration_estimation_with_labels.csv"  # Replace with your file path
training_data = pd.read_csv(training_data_file_path)

# Define features and labels for training
features = training_data.drop(columns=['dehydrated'])  # All columns except the label
labels = training_data['dehydrated']  # Dehydration label (1 for dehydrated, 0 for not dehydrated)

# Normalize the features
scaler = StandardScaler()
features_normalized = scaler.fit_transform(features)

# Split training data into training and validation sets
X_train, X_val, y_train, y_val = train_test_split(features_normalized, labels, test_size=0.2, random_state=42)

# Build a simple feedforward neural network
model = Sequential([
    Dense(128, activation='relu', input_dim=X_train.shape[1]),
    Dropout(0.5),
    Dense(64, activation='relu'),
    Dropout(0.5),
    Dense(1, activation='sigmoid')  # Binary classification output
])

# Compile the model
model.compile(optimizer='adam', loss='binary_crossentropy', metrics=['accuracy'])

# Train the model
model.fit(X_train, y_train, epochs=50, batch_size=16, validation_data=(X_val, y_val), verbose=1)

# Load the generated test data
test_data_file_path = "test_data_dehyd.csv"  # Replace with your file path
test_data = pd.read_csv(test_data_file_path)

# Normalize the test data using the same scaler
test_data_normalized = scaler.transform(test_data)

# Make predictions on the test data
predictions = model.predict(test_data_normalized)

# Add predictions as a new column to the test dataset
test_data['dehydrated_prediction'] = (predictions > 0.5).astype(int)  # Binary classification

# Save the test dataset with predictions to a new CSV file
test_data_with_predictions_file_path = "test_data_with_predictions.csv"
test_data.to_csv(test_data_with_predictions_file_path, index=False)

print(f"Test data with predictions saved to: {test_data_with_predictions_file_path}")